alpha_bias_jh_data = mean(alpha_sim_jh_data) - alpha_hat_jh_data
lambda_bias_jh_data = mean(lambda_sim_jh_data) - lambda_hat_jh_data
alpha_se_jh_data = sd(alpha_sim_jh_data)
lambda_se_jh_data = sd(lambda_sim_jh_data)
print(paste("Alpha_Estimate:", round(alpha_hat_jh_data,2)))
print(paste("Alpha_Bias:", round(alpha_bias_jh_data,2)))
print(paste("Alpha_SE:", round(alpha_se_jh_data,2)))
print(paste("Lambda_Estimate:", round(lambda_hat_jh_data,2)))
print(paste("Lambda_Bias:", round(lambda_bias_jh_data,2)))
print(paste("Lambda_SE:", round(lambda_se_jh_data,2)))
lung = read.csv("/Users/qiujinhang/Desktop/ST1131/Data/lung_cancer.csv", sep = ",", header = TRUE)
lung$Gender
length(lung$Gender)
table(lung$Gender)
prop.table(table(lung$Gender))
prop.table(table(lung$Gender)) * 100
lung$Gender <- ifelse(lung$Gender=="0", "Female", "Male")
table(lung$Gender)
barplot(table(lung$Gender), ylab="Frequency", xlab="Gender", col(2,5), main="Bar plot of Gender")
barplot(table(lung$Gender), ylab="Frequency", xlab="Gender", col=c(2,5), main="Bar plot of Gender")
table(lung$Cancer\)
table(lung$Cancer)
lung$Cancer <- ifelse(lung$Cancer=="0", "Yes", "No")
table(lung$Cancer)
pie(table(lung$Cancer), col=c(2,5), main="Pie plot of cancer")
pie(table(lung$Cancer), names.arg=("A", "B"), col=c(2,5))
pie(table(lung$Cancer), names.arg=c("A", "B"), col=c(2,5))
data<- read.csv("midterm_marks")
data<- read.csv("/Users/qiujinhang/Desktop/ST1131/Data/midterm_marks.csv")
data
mark <- data[,2]
summary(mark)
quantile(mark, 0.75)
hist(mark)
hist(mark, prob = TRUE, col = 2, xlab = "Midterm Marks", ylab = "Density", main = "Histogram of the Midterm Marks)
hist(mark, prob = TRUE, col = 2, xlab = "Midterm Marks", ylab = "Density", main = "Histogram of the Midterm Marks)
;
hist(mark, prob = TRUE, col = 2, xlab = "Midterm Marks", ylab = "Density", main = "Histogram of the Midterm Marks")
hist(mark)
length(mark)
hist(mark[mark<30], main="Histo")
hist(mark[mark<30], prob = TRUE, col=3, main="Histo")
boxplot.stats(mark)
boxplot(mark, ylab = "Midterm marks", main = "Boxplot of midterm marks", col = 5)
abline(h = median(mark), col = "red")
BMI = c(29.5,28.6,24.7, 28.8, 23.7, 23.3,28.8, 26.7, 23.6, 27.1, 24.5,20.7,28,24.7, 16.3,26,14,
25.8,17.5,30.7,17.5,30.6, 29.7, 24.5,35,21.9,20.9,24.3,27.3, 26.5, 22,16.3, 30.1, 27.2)
BMI
BMI = c(29.5,28.6,24.7, 28.8, 23.7, 23.3,28.8, 26.7, 23.6, 27.1, 24.5,20.7,28,24.7, 16.3,26,14, 25.8,17.5,30.7,17.5,30.6, 29.7, 24.5,35,21.9,20.9,24.3,27.3, 26.5, 22,16.3, 30.1, 27.2)
BMI
hist(BMI, prop = FALSE, col = 2, xlab="BMI", ylab="Frequency", main="Histogram of BMI")
hist(BMI, prop = TRUE, col = 2, xlab="BMI", ylab="Density", main="Histogram of BMI")
hist(BMI, prob = TRUE, col = 2, xlab="BMI", ylab="Density", main="Histogram of BMI")
MASS
MASS.phones
lib(MASS)
?MASS
install.packages("MASS")
MASS
library(MASS)
a = install.packages("package name")
a
a = library(MASS)
a
a.MASS
a$MASS
data(package="MASS")
data(phones)
phones
df1 = data.frame(phones$year, phones$calls)
df1
df1 = data.frame(phones$year, phones$calls, header=TRUE)
df1
df1 = data.frame(x=phones$year, y=phones$calls, header=TRUE)
df1
df1 = data.frame(x=phones$year, y=phones$calls)
df1
write.csv(df1, "../../src/data/phones-2420.csv")
ls -ld ../../src/data/
length(df1)
length(phones)
df1[df1$y>100 & df1$y<200]
df1[df1$y>100 & df1$y<200,]
#q3
length(df1$x)
sort(df1)
?sort
summary(df1)
#q4
X <- cbind(1, phones$year)
Y <- matrix(phones$calls, ncol = 1)
X
Y
beta_hat = (solve(t(X)%*%X)) %*% t(X) %*% y
#q4
X <- cbind(1, phones$year)
y <- matrix(phones$calls, ncol = 1)
beta_hat = (solve(t(X)%*%X)) %*% t(X) %*% y
y_hat = X %*% beta_hat
y
lm_output <- lm(y ~ x, data=df1)
lm_output
?combn
combn(phones$calls, 2)
typeof(lm_output)
lm_output
ï¼Ÿmatch
?match
#q7
library(jsonlite)
corrected_data <- read_json("data/phones.json", TRUE)
corrected_data <- read_json("../../src/data/phones.json", TRUE)
corrected_data <- read_json("../src/data/phones.json", TRUE)
corrected_data <- read_json("/Users/qiujinhang/Desktop/ST2137/src/data/phones.json", TRUE)
corrected_data <- read_json("../../ST2137/src/data/phones.json", TRUE)
corrected_data <- read_json("../../src/data/phones.json", TRUE)
corrected_data <- read_json(".././src/data/phones.json", TRUE)
corrected_data <- read_json("././src/data/phones.json", TRUE)
corrected_data <- read_json("./src/data/phones.json", TRUE)
corrected_data
match(corrected_data$year, df1$x)
df1
df1[16]
df1[16,]
length(match(corrected_data$year, df1$x))
index_array = match(corrected_data$year, df1$x)
for (i in length(index)) {
index = index_array[i,]
df1[index,]$y = corrected_data$corrected_calls[i,]
}
index_array = match(corrected_data$year, df1$x)
for (i in length(index_array)) {
index = index_array[i,]
df1[index,]$y = corrected_data$corrected_calls[i,]
}
df1[index,]$y = corrected_data[i,]$corrected_calls
index_array = match(corrected_data$year, df1$x)
for (i in length(index_array)) {
index = index_array[i]
df1[index,]$y = corrected_data[i,]$corrected_calls
}
corrected_data
index_array = match(corrected_data$year, df1$x)
for (i in length(index_array)) {
index = index_array[i]
df1[index,]$y = corrected_data[i]$corrected_calls
}
load("~/Desktop/ST2137/src/data/phones.json")
df1 = data.frame(
x = c(50, 51, 52, 53, 54, 55),
y = c(4.4, 4.7, 4.7, 5.9, 6.6, 7.3)
)
write.csv(df1, "~/Desktop/ST2137/src/data/phones-2420.csv")
#q3
df1 = data.frame(year=phones$year, calls=phones$calls)
as.data.frame(phones)
NROW(phones)
dim(phones)
length(df1[df1$calls>100 & df1$calls<200,])
length(which(df1[df1$calls>100 & df1$calls<200,]))
length(which(phones$calls>100 & phones$calls<200))
which(phones$calls>100 & phones$calls<200)
#q1
df1 = data.frame(
x = c(50, 51, 52, 53, 54, 55),
y = c(4.4, 4.7, 4.7, 5.9, 6.6, 7.3)
)
subset(phones, calls > 100)
subset(df1, calls > 100)
?
subset()
subset(phones, calls > 100 & calls < 200)
#load the data
library(MASS)
data(phones)
NROW(phones)
dim(phones)
# which(phones$calls>100 & phones$calls<200) -> vector
length(which(phones$calls>100 & phones$calls<200))
subset(phones, calls > 100 & calls < 200)
# largest 3
sort(phones, decreasing=TRUE)[1:3]
# largest 3
sort(phones$calls, decreasing=TRUE)[1:3]
# smallest 3
sort(phones$calls)[1:3]
subset(phones, calls > 100 & calls < 200)
head(phones)
subset(df1, calls > 100 & calls < 200)
head(df1)
#q3
phones_df = data.frame(year=phones$year, calls=phones$calls)
as.data.frame(phones) # another method to create data frame
NROW(phones_df)
dim(phones_df)
# largest 3
sort(phones_df$calls, decreasing=TRUE)[1:3]
# smallest 3
sort(phones_df$calls)[1:3]
# which(phones$calls>100 & phones$calls<200) -> vector
length(which(phones_dfs$calls>100 & phones_df$calls<200))
# which(phones$calls>100 & phones$calls<200) -> vector
length(which(phones_df$calls>100 & phones_df$calls<200))
subset(phones_df, calls > 100 & calls < 200)
phones_df$year[which.max(phones_df$calls)]
?head
head(phones_df)
head(phones_df$calls)
phones_df[phones_df$calls == max(phones_df$calls)]
phones_df[phones_df$calls == max(phones_df$calls), ]
all_combn = combn(24, 2)
all_slopes = rep(0.0, length=276)
for (i in 1:276) {
y_vec = phones_df$calls[all_combn[,i]]
x_vec = phones_df$year[all_combn[,i]]
all_slopes[i] = (y_vec[2] - y_vec[1]) / (x_vec[2] - x_vec[1])
}
fit_slope = median(all_slopes)
fit_intercept = median(phones_df$calls) - median(phones_df$year) * fit_slope
#q7
library(jsonlite)
corrected_data <- read_json("data/phones.json", TRUE)
corrected_data <- read_json("~/Desktop/ST2137/src/data/phones.json", TRUE)
# match returns the index
index_array = match(corrected_data$year, df1$x)
# solution
phones_df$calls[index_array] = corrected_data$corrected_calls
all_combn = combn(24, 2)
# match returns the index
index_array = match(corrected_data$year, phones_df1$x)
# match returns the index
index_array = match(corrected_data$year, phones_df$x)
# for loop -> not optimal
for (i in length(index_array)) {
index = index_array[i]
df1[index,]$calls = corrected_data[i]$corrected_calls
}
# solution
phones_df$calls[index_array] = corrected_data$corrected_calls
# for loop -> not optimal
for (i in length(index_array)) {
index = index_array[i]
phones_df[index,]$calls = corrected_data[i]$corrected_calls
}
# match returns the index
index_array = match(corrected_data$year, phones_df$year)
# solution
phones_df$calls[index_array] = corrected_data$corrected_calls
# match returns the index
index_array = match(corrected_data$year, phones_df$year)
# for loop -> not optimal
for (i in length(index_array)) {
index = index_array[i]
phones_df[index,]$calls = corrected_data[i]$corrected_calls
}
# solution
phones_df$calls[index_array] = corrected_data$corrected_calls
getwd
getwd()
setwd("~/Desktop/ST2137/Tutorial/tut4")
path = "../../src/"
data = read.csv(path+"data/student/student-por.csv")
data = read.csv("../../src/data/student/student-por.csv")
df = data.frame(data)
df
mi <- function(x, y) {
joint_table <- table(x, y) / length(x)  # P(X, Y)
px <- table(x) / length(x)              # P(X)
py <- table(y) / length(y)              # P(Y)
mi <- 0
for (i in rownames(joint_table)) {
for (j in colnames(joint_table)) {
pxy <- joint_table[i, j]
if (pxy > 0) {  # Avoid log(0)
mi <- mi + pxy * log(pxy / (px[i] * py[j]))
}
}
}
return(mi)
}
mi(df$address, df$paid)
table(df$address, df$paid)
df
table(df$address, df$paid)
t
t <- table(df$address, df$paid)
t
t <- as.table(df$address, df$paid)
df2 = df[c("address", "paid")]
df2 = df[c('address', 'paid')]
df2 = df[,c('address', 'paid')]
df2 = df[:,c('address', 'paid')]
df2 = df[1:, c('address', 'paid')]
df2 = data.frame(df$address, df$paid)
table(df2)
as.table(df2)
df2 = data.frame("address" = df$address, "paid" = df$paid)
as.table(df2)
df = data.frame(data)
df2 = data.frame("address" = df$address, "paid" = df$paid)
df2
df2
df$address
data = read.csv("../../src/data/student/student-por.csv")
df = data.frame(data)
df$address
df
?read.csv
data = read.csv("../../src/data/student/student-por.csv", sep = ";")
df = data.frame(data)
df
df$address
df2 = data.frame("address" = df$address, "paid" = df$paid)
df2
as.table(df2)
table(df2)
ct <- table(df2)
data = read.csv("../../src/data/student/student-por.csv", sep = ";")
df = data.frame(data)
df2 = data.frame("address" = df$address, "paid" = df$paid)
ct <- table(df2)
data = read.csv("../../src/data/student/student-por.csv", sep = ";")
df = data.frame(data)
df2 = data.frame("address" = df$address, "paid" = df$paid)
ct <- table(df2)
mi <- function(x, y) {
joint_table <- table(x, y) / length(x)  # P(X, Y)
px <- table(x) / length(x)              # P(X)
py <- table(y) / length(y)              # P(Y)
mi <- 0
for (i in rownames(joint_table)) {
for (j in colnames(joint_table)) {
pxy <- joint_table[i, j]
if (pxy > 0) {  # Avoid log(0)
mi <- mi + pxy * log(pxy / (px[i] * py[j]))
}
}
}
return(mi)
}
mi(df$address, df$paid)
chisq.test(ct)
?table
?rowsum
rowsum(ct)
prop_ct <- prop.table(df2)
df$address <- as.factor(df$address)
df$paid <- as.factor(df$paid)
df2 <- data.frame("address" = df$address, "paid" = df$paid)
ct <- table(df2)
chisq.test(ct)
prop_ct <- prop.table(df2)
prop_ct <- prop.table(ct)
prop_ct
prop_ct <- prop.table(ct,margin=1)
prop_ct
?prop.table
?cuyt
?cut
df$G3
cut(df$G3, break=c(0, 10, 12, 15, 18, 20))
cut(df$G3, breaks=c(0, 10, 12, 15, 18, 20))
cut(df$G3, breaks=c(0, 10, 12, 15, 18, 20), labels=('F', 'D', 'C', 'B', 'A'))
cut(df$G3, breaks=c(0, 10, 12, 15, 18, 20), labels=c('F', 'D', 'C', 'B', 'A'))
cut(df$G3, breaks=c(-1, 10, 12, 15, 18, 20), labels=c('F', 'D', 'C', 'B', 'A'))
df$LG <- cut(df$G3, breaks=c(-1, 10, 12, 15, 18, 20), labels=c('F', 'D', 'C', 'B', 'A'))
df
header(df)
head(df)
?mosaicplot
ct2 <- as.table(data.frame(df$Dalc, df$Walc))
ct2 <- table(data.frame(df$Dalc, df$Walc))
mosaicplot(ct2, shade=TRUE)
?mosaicplot
mosaicplot(ct2, shade=TRUE)
alc_fam <- table(data.frame("Dalc"=df$Dalc, "Walc"=df$Walc))
mosaicplot(alc_fam, shade=TRUE)
df$LG <- as.factor(cut(df$G3, breaks=c(-1, 10, 12, 15, 18, 20),
labels=c('F', 'D', 'C', 'B', 'A')))
alc_fam <- as.table(data.frame("Dalc"=as.factor(df$Dalc),
"Walc"=as.factor(df$Walc)))
alc_fam <- as.table(data.frame("Dalc"=as.factor(df$Dalc),
"Walc"=as.factor(df$Walc)))
df$LG <- as.factor(cut(df$G3, breaks=c(-1, 10, 12, 15, 18, 20),
labels=c('F', 'D', 'C', 'B', 'A')))
alc_fam <- as.table(data.frame("Dalc"=as.factor(df$Dalc),
"Walc"=as.factor(df$Walc)))
alc_fam <- table(data.frame("Dalc"=as.factor(df$Dalc),
"Walc"=as.factor(df$Walc)))
mosaicplot(alc_fam, shade=TRUE)
likert_vars <- df["famrel" : "health"]
likert_vars <- df["famrel", "health"]
likert_vars <- df["famrel"]
View(likert_vars)
likert_vars <- df[c("famrel","freetime")]
View(likert_vars)
likert_vars <- df[c("famrel":"health")]
likert_vars <- c("famrel", "freetime", "goout", "Dalc", "Walc", "health")
ct <- table(df2)
ct
RR <- ct['no']
RR
RR <- ct$paid
cramer_results <- sapply(likert_vars, function(var) {
table_var <- table(df[[var]], df$letter_grade)  # Create contingency table
assocstats(table_var)$cramer  # Extract CramÃ©r's V
})
table_var <- table(df[var], df$letter_grade)  # Create contingency table
assocstats(table_var)$cramer  # Extract CramÃ©r's V
cramer_results <- sapply(likert_vars, function(var) {
table_var <- table(df[var], df$letter_grade)  # Create contingency table
assocstats(table_var)$cramer  # Extract CramÃ©r's V
})
table_var <- table(df[[var]], df$letter_grade)  # Create contingency table
cramer_results <- sapply(likert_vars, function(var) {
table_var <- table(df[[var]], df$letter_grade)  # Create contingency table
assocstats(table_var)$cramer  # Extract CramÃ©r's V
})
colSums(is.na(df))
length(df[[var]])
length(df[[var]])
length()
length(df)
table_var <- table(df[,[var]], df$letter_grade)  # Create contingency table
for (v in likert_vars) {
}
for (v in likert_vars) {
table_var <- table(df[v], df$letter_grade)
}
for (v in likert_vars) {
v
}
for (v in likert_vars) {
df$v
}
print(df$v)
for (v in likert_vars) {
print(df$v)
}
print(df[v])
for (v in likert_vars) {
print(df[v])
}
print(table(df[v], df$LG))
for (v in likert_vars) {
print(table(df[v], df$LG))
}
table(df[v], df$LG)
for (v in likert_vars) {
table(df[v], df$LG)
}
for (v in likert_vars) {
table(df[[v]], df$LG)
}
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
s <- c(s, assocstats(table_var)$cramer)
}
s <- c()
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
s <- c(s, assocstats(table_var)$cramer)
}
?assocstats
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
s <- c(s, cor(table_var)$cramer)
}
alc_fam <- table(data.frame("Dalc"=as.factor(df$Dalc),
"Walc"=as.factor(df$Walc)))
s
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
s <- c(s, cor(table_var)$cramer)
}
s <- c()
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
s <- c(s, cor(table_var))
}
s
p_value <- chisq.test(table_var)$p_value
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
p_value <- chisq.test(table_var)$p_value
}
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
p_value <- chisq.test(table_var)$p_value
}
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
p_value <- chisq.test(table_var)
}
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
chisq.test(table_var)
}
chisq.test(table_var)
fisher.test(table_var)
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
fisher.test(table_var)
}
chisq.test(table_var)
fisher.test(table_var)
chisq.test(table_var)$expected
s <- c()
for (v in likert_vars) {
table_var <- table(df[[v]], df$LG)
chisq.test(table_var)$expected
}
